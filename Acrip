
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "XEO-Hub " .. Fluent.Version,
    SubTitle = "",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "Main" }),
    Material = Window:AddTab({Title = "Material",Icon = "Material"}),
    Shop = Window:AddTab({ Title = "Shop", Icon = "Shop" }),
    Race = Window:AddTab({ Title = "Race", Icon = "Race" }),
    Dungeon = Window:AddTab({ Title = "Dungeon", Icon = "Dungeon" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "Teleport" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Loader XEO-HUB",
        SubContent = "succeed", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "XEO-Hub",
        Content = "Hi user!"
    })

----

    Tabs.Shop:AddButton({
        Title = "BuySharkmanKarate",
        Description = "",
        Callback = function()
            Window:Dialog({
                Title = "Title",
                Content = "This is a dialog",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function(local args = {
    [1] = "BuySharkmanKarate"
}

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args)))
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    ----

    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Farm", Default = false })

    Toggle:OnChanged(function()
        print(coming soon)
    end)

----

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Fast-Attack", Default = false })

    Toggle:OnChanged(function()
        print(Super fast)
    end)

----

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "FPS BOOTS", Default = false })

    Toggle:OnChanged(function()
        print(loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FPS-BOOSTER/main/FPSBooster.txt"))())
    end)

    Options.MyToggle:SetValue(false)

    ----

    
 local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

   

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Notify",
    Content = "loader succeed.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
